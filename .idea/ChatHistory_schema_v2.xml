<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChatHistoryState">
    <option name="serializedSessions">
      <map>
        <entry key="3f0bb971-4994-4e1e-babe-15547c2a84dd" value="{&quot;id&quot;:&quot;3f0bb971-4994-4e1e-babe-15547c2a84dd&quot;,&quot;name&quot;:&quot;Add app sharing functionality via intent&quot;,&quot;timestamp&quot;:1755018491230,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\n\u003cadditional_data\u003e\nBelow are some potentially helpful/relevant pieces of information for figuring out to respond\n\u003ccurrent_file\u003e\n```kotlin:app/src/main/java/com/softklass/linkbarn/ui/main/MainScreen.kt, lines\u003dALL(1-1231)\npackage com.softklass.linkbarn.ui.main\n\nimport android.content.Intent\nimport android.util.Log\nimport androidx.compose.animation.AnimatedVisibility\nimport androidx.compose.animation.animateContentSize\nimport androidx.compose.animation.core.tween\nimport androidx.compose.animation.expandVertically\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.animation.shrinkVertically\nimport androidx.compose.animation.slideOutHorizontally\nimport androidx.compose.foundation.BorderStroke\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.LazyListState\nimport androidx.compose.foundation.lazy.LazyRow\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.foundation.lazy.rememberLazyListState\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.text.KeyboardActions\nimport androidx.compose.foundation.text.KeyboardOptions\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.ArrowUpward\nimport androidx.compose.material.icons.rounded.Add\nimport androidx.compose.material.icons.rounded.AddLink\nimport androidx.compose.material.icons.rounded.Category\nimport androidx.compose.material.icons.rounded.Check\nimport androidx.compose.material.icons.rounded.Dashboard\nimport androidx.compose.material.icons.rounded.Done\nimport androidx.compose.material.icons.rounded.EditNote\nimport androidx.compose.material.icons.rounded.Settings\nimport androidx.compose.material.icons.rounded.Share\nimport androidx.compose.material3.BottomAppBar\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.ButtonGroupDefaults\nimport androidx.compose.material3.CardDefaults\nimport androidx.compose.material3.CircularProgressIndicator\nimport androidx.compose.material3.ElevatedCard\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.ExperimentalMaterial3ExpressiveApi\nimport androidx.compose.material3.ExtendedFloatingActionButton\nimport androidx.compose.material3.FilterChipDefaults\nimport androidx.compose.material3.FloatingActionButton\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.IconButtonDefaults\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.ModalBottomSheet\nimport androidx.compose.material3.OutlinedTextField\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.SnackbarDuration\nimport androidx.compose.material3.SnackbarHost\nimport androidx.compose.material3.SnackbarHostState\nimport androidx.compose.material3.SnackbarResult\nimport androidx.compose.material3.SuggestionChip\nimport androidx.compose.material3.SuggestionChipDefaults\nimport androidx.compose.material3.SwipeToDismissBox\nimport androidx.compose.material3.SwipeToDismissBoxValue\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextButton\nimport androidx.compose.material3.TextFieldDefaults\nimport androidx.compose.material3.ToggleButton\nimport androidx.compose.material3.ToggleButtonDefaults\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.material3.TopAppBarDefaults\nimport androidx.compose.material3.rememberModalBottomSheetState\nimport androidx.compose.material3.rememberSwipeToDismissBoxState\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.derivedStateOf\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.runtime.saveable.rememberSaveable\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.focus.FocusRequester\nimport androidx.compose.ui.focus.focusRequester\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.input.nestedscroll.nestedScroll\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.input.ImeAction\nimport androidx.compose.ui.text.input.KeyboardCapitalization\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.core.content.ContextCompat\nimport androidx.core.content.ContextCompat.startActivity\nimport androidx.core.net.toUri\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport com.softklass.linkbarn.MainActivity\nimport com.softklass.linkbarn.R\nimport com.softklass.linkbarn.data.model.Category\nimport com.softklass.linkbarn.data.model.Link\nimport com.softklass.linkbarn.ui.partials.DismissBackground\nimport com.softklass.linkbarn.ui.partials.TopAppBarIcon\nimport kotlinx.coroutines.launch\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun MainScreen(\n    viewModel: MainViewModel,\n    onNavigateToSettings: () -\u003e Unit \u003d {},\n    onNavigateToCategories: () -\u003e Unit \u003d {},\n    onNavigateToDashboard: () -\u003e Unit \u003d {},\n) {\n    var openBottomSheet by rememberSaveable { mutableStateOf(false) }\n\n    // Handle shared URL from MainActivity\n    LaunchedEffect(Unit) {\n        MainActivity.sharedUrl?.let { url -\u003e\n            viewModel.setSharedUrl(url)\n            openBottomSheet \u003d true\n            MainActivity.sharedUrl \u003d null // Clear the shared URL after handling\n        }\n    }\n\n    // Add the bottom sheet\n    ModalBottomSheetAddUrl(\n        openBottomSheet \u003d openBottomSheet,\n        onOpenBottomSheetChange \u003d { openBottomSheet \u003d it },\n    )\n\n    EnterAlwaysTopAppBar(\n        viewModel \u003d viewModel,\n        onNavigateToSettings \u003d onNavigateToSettings,\n        onNavigateToCategories \u003d onNavigateToCategories,\n        onNavigateToDashboard \u003d onNavigateToDashboard,\n        openBottomSheet \u003d { openBottomSheet \u003d true },\n    )\n}\n\n@OptIn(ExperimentalMaterial3Api::class, ExperimentalMaterial3ExpressiveApi::class)\n@Composable\nfun EnterAlwaysTopAppBar(\n    viewModel: MainViewModel,\n    onNavigateToSettings: () -\u003e Unit \u003d {},\n    onNavigateToCategories: () -\u003e Unit \u003d {},\n    onNavigateToDashboard: () -\u003e Unit \u003d {},\n    openBottomSheet: () -\u003e Unit,\n) {\n    val scrollBehavior \u003d TopAppBarDefaults.enterAlwaysScrollBehavior()\n    val coroutineScope \u003d rememberCoroutineScope()\n    val listState \u003d rememberLazyListState()\n    val links by viewModel.links.collectAsState()\n\n    val isTopAppBarOffScreen by remember {\n        derivedStateOf {\n            scrollBehavior.state.heightOffset \u003c -5\n        }\n    }\n    val snackbarHostState \u003d remember { SnackbarHostState() }\n\n    Scaffold(\n        snackbarHost \u003d { SnackbarHost(snackbarHostState) },\n        modifier \u003d Modifier.nestedScroll(scrollBehavior.nestedScrollConnection),\n        topBar \u003d {\n            TopAppBar(\n                title \u003d {\n                    Text(\n                        text \u003d stringResource(id \u003d R.string.main_screen_title),\n                        color \u003d MaterialTheme.colorScheme.primary,\n                        maxLines \u003d 1,\n                        overflow \u003d TextOverflow.Ellipsis,\n                    )\n                },\n                subtitle \u003d { Text(\&quot;Your saved links.\&quot;, maxLines \u003d 1, overflow \u003d TextOverflow.Ellipsis) },\n                scrollBehavior \u003d scrollBehavior,\n                actions \u003d {\n                    TopAppBarIcon { shareApp() }\n\n                },\n            )\n        },\n        bottomBar \u003d {\n            BottomAppBar(\n                containerColor \u003d MaterialTheme.colorScheme.surface,\n                actions \u003d {\n                    IconButton(onClick \u003d { onNavigateToCategories() }) {\n                        Icon(\n                            imageVector \u003d Icons.Rounded.Category,\n                            contentDescription \u003d \&quot;Categories\&quot;,\n                            tint \u003d MaterialTheme.colorScheme.onSurface,\n                        )\n                    }\n\n                    IconButton(onClick \u003d { onNavigateToDashboard() }) {\n                        Icon(\n                            imageVector \u003d Icons.Rounded.Dashboard,\n                            contentDescription \u003d \&quot;Dashboard\&quot;,\n                            tint \u003d MaterialTheme.colorScheme.onSurface,\n                        )\n                    }\n\n                    IconButton(onClick \u003d { onNavigateToSettings() }) {\n                        Icon(\n                            imageVector \u003d Icons.Rounded.Settings,\n                            contentDescription \u003d \&quot;Settings\&quot;,\n                            tint \u003d MaterialTheme.colorScheme.onSurface,\n                        )\n                    }\n                },\n                floatingActionButton \u003d {\n                    ExtendedFloatingActionButton(\n                        onClick \u003d openBottomSheet,\n                        icon \u003d { Icon(Icons.Rounded.Add, \&quot;Add a Link\&quot;, tint \u003d MaterialTheme.colorScheme.onPrimary) },\n                        text \u003d { Text(text \u003d \&quot;Add a Link\&quot;) },\n                        containerColor \u003d MaterialTheme.colorScheme.primary,\n                        shape \u003d RoundedCornerShape(16.dp),\n                    )\n                },\n            )\n        },\n        content \u003d { innerPadding -\u003e\n            Box(modifier \u003d Modifier.fillMaxSize()) {\n                Column(\n                    modifier \u003d Modifier\n                        .padding(innerPadding)\n                        .fillMaxSize(),\n                ) {\n                    CollapsingHeader(viewModel \u003d viewModel, isTopAppBarOffScreen \u003d isTopAppBarOffScreen)\n                    LinksContent(\n                        viewModel \u003d viewModel,\n                        listState \u003d listState,\n                        openBottomSheet \u003d openBottomSheet,\n                        onDelete \u003d { link -\u003e\n                            viewModel.deleteLink(link)\n\n                            coroutineScope.launch {\n                                val result \u003d snackbarHostState\n                                    .showSnackbar(\n                                        message \u003d \&quot;Category ${link.name} deleted\&quot;,\n                                        actionLabel \u003d \&quot;Undo\&quot;,\n                                        duration \u003d SnackbarDuration.Short,\n                                        withDismissAction \u003d true,\n                                    )\n                                when (result) {\n                                    SnackbarResult.ActionPerformed -\u003e {\n                                        Log.d(\&quot;MainScreen\&quot;, \&quot;Undo delete tapped ${link.name}\&quot;)\n                                        viewModel.undoDelete()\n                                    }\n\n                                    SnackbarResult.Dismissed -\u003e {\n                                        Log.d(\&quot;MainScreen\&quot;, \&quot;Snackbar dismissed\&quot;)\n                                    }\n                                }\n                            }\n                        },\n                        links \u003d links,\n                    )\n                }\n\n                AnimatedVisibility(\n                    visible \u003d isTopAppBarOffScreen,\n                    enter \u003d fadeIn(),\n                    exit \u003d fadeOut(),\n                    modifier \u003d Modifier\n                        .align(Alignment.BottomEnd) // Position at bottom-right\n                        .padding(innerPadding) // Respect Scaffold padding\n                        .padding(16.dp), // Additional padding for the FAB\n                ) {\n                    FloatingActionButton(\n                        onClick \u003d {\n                            coroutineScope.launch {\n                                listState.animateScrollToItem(0) // Scroll LazyColumn to top\n                                // Optionally, also expand the TopAppBar fully\n                                scrollBehavior.state.heightOffset \u003d 0f\n                            }\n                        },\n                        containerColor \u003d MaterialTheme.colorScheme.secondary,\n                        contentColor \u003d MaterialTheme.colorScheme.onSecondary,\n                    ) {\n                        Icon(Icons.Filled.ArrowUpward, \&quot;Scroll to top\&quot;)\n                    }\n                }\n            }\n        },\n    )\n}\n\n@OptIn(ExperimentalMaterial3ExpressiveApi::class)\n@Composable\nprivate fun CollapsingHeader(viewModel: MainViewModel, isTopAppBarOffScreen: Boolean) {\n    Column(\n        modifier \u003d Modifier\n            .fillMaxWidth()\n            .padding(horizontal \u003d 16.dp),\n    ) {\n        val allLinks by viewModel.allLinks.collectAsState()\n        val options \u003d listOf(LinkFilter.ALL, LinkFilter.VISITED, LinkFilter.UNVISITED)\n        val currentFilter by viewModel.currentFilter.collectAsState()\n\n        Row(\n            horizontalArrangement \u003d Arrangement.spacedBy(ToggleButtonDefaults.IconSpacing),\n            modifier \u003d Modifier.animateContentSize(),\n        ) {\n            if (allLinks.isNotEmpty()) {\n                options.forEachIndexed { index, label -\u003e\n                    ToggleButton(\n                        checked \u003d currentFilter \u003d\u003d label,\n                        onCheckedChange \u003d {\n                            when (label) {\n                                LinkFilter.ALL -\u003e viewModel.setFilter(LinkFilter.ALL)\n                                LinkFilter.VISITED -\u003e viewModel.setFilter(LinkFilter.VISITED)\n                                LinkFilter.UNVISITED -\u003e viewModel.setFilter(LinkFilter.UNVISITED)\n                                else -\u003e {}\n                            }\n                        },\n                        modifier \u003d Modifier.weight(1f),\n\n                        shapes \u003d\n                        when (index) {\n                            0 -\u003e ButtonGroupDefaults.connectedLeadingButtonShapes()\n                            options.lastIndex -\u003e ButtonGroupDefaults.connectedTrailingButtonShapes()\n                            else -\u003e ButtonGroupDefaults.connectedMiddleButtonShapes()\n                        },\n                    ) {\n                        if (currentFilter \u003d\u003d label) {\n                            Icon(\n                                Icons.Rounded.Done,\n                                contentDescription \u003d \&quot;Localized description\&quot;,\n                            )\n                        }\n\n                        val text \u003d when (label) {\n                            LinkFilter.ALL -\u003e \&quot;All\&quot;\n                            LinkFilter.VISITED -\u003e \&quot;Visited\&quot;\n                            LinkFilter.UNVISITED -\u003e \&quot;Unvisited\&quot;\n                            else -\u003e \&quot;\&quot;\n                        }\n                        Text(text, maxLines \u003d 1)\n                    }\n                }\n            }\n        }\n\n        Spacer(modifier \u003d Modifier.height(8.dp))\n\n        // Category filter chips\n        val allCategories by viewModel.allCategories.collectAsState()\n        val selectedCategoryIds by viewModel.selectedCategoryIds.collectAsState()\n\n        if (allCategories.isNotEmpty()) {\n            AnimatedVisibility(\n                visible \u003d !isTopAppBarOffScreen,\n                enter \u003d expandVertically(\n                    animationSpec \u003d tween(500),\n                ) + fadeIn(),\n                exit \u003d shrinkVertically(\n                    animationSpec \u003d tween(500),\n                ) + fadeOut(),\n            ) {\n                Text(\n                    text \u003d \&quot;Filter by category\&quot;.uppercase(),\n                    style \u003d MaterialTheme.typography.titleSmallEmphasized,\n                    modifier \u003d Modifier\n                        .fillMaxWidth()\n                        .padding(horizontal \u003d 16.dp, vertical \u003d 4.dp),\n                )\n            }\n\n            LazyRow(\n                modifier \u003d Modifier\n                    .fillMaxWidth()\n                    .padding(horizontal \u003d 8.dp),\n                horizontalArrangement \u003d Arrangement.spacedBy(8.dp),\n            ) {\n                // \&quot;All\&quot; chip\n                item {\n                    androidx.compose.material3.FilterChip(\n                        selected \u003d selectedCategoryIds.isEmpty(),\n                        onClick \u003d { viewModel.selectCategoryFilter(null) },\n                        label \u003d { Text(\&quot;All\&quot;) },\n                        modifier \u003d Modifier.padding(vertical \u003d 4.dp),\n                    )\n                }\n\n                // Category chips\n                items(allCategories) { category -\u003e\n                    androidx.compose.material3.FilterChip(\n                        selected \u003d selectedCategoryIds.contains(category.id),\n                        leadingIcon \u003d if (selectedCategoryIds.contains(category.id)) {\n                            {\n                                Icon(\n                                    imageVector \u003d Icons.Rounded.Check,\n                                    contentDescription \u003d \&quot;Done icon\&quot;,\n                                    modifier \u003d Modifier.size(FilterChipDefaults.IconSize),\n                                )\n                            }\n                        } else {\n                            null\n                        },\n                        onClick \u003d { viewModel.selectCategoryFilter(category.id) },\n                        label \u003d { Text(category.name) },\n                        modifier \u003d Modifier.padding(vertical \u003d 4.dp),\n                    )\n                }\n            }\n\n            Spacer(modifier \u003d Modifier.height(8.dp))\n        }\n    }\n}\n\n@Composable\nprivate fun LinksContent(\n    viewModel: MainViewModel,\n    listState: LazyListState,\n    openBottomSheet: () -\u003e Unit,\n    onDelete: (Link) -\u003e Unit,\n    links: List\u003cLink\u003e \u003d emptyList(),\n) {\n    val deletingLinkIds by viewModel.deletingLinkIds.collectAsState()\n    val currentFilter by viewModel.currentFilter.collectAsState()\n\n    LazyColumn(\n        state \u003d listState,\n        modifier \u003d Modifier\n            .fillMaxWidth()\n            .padding(horizontal \u003d 16.dp),\n        verticalArrangement \u003d Arrangement.spacedBy(8.dp),\n    ) {\n        if (links.isEmpty()) {\n            item {\n                Column(\n                    modifier \u003d Modifier\n                        .fillMaxWidth()\n                        .padding(16.dp),\n                    horizontalAlignment \u003d Alignment.CenterHorizontally,\n                ) {\n                    // Customize empty state text based on current filter\n                    val emptyStateText \u003d when (currentFilter) {\n                        LinkFilter.VISITED -\u003e \&quot;No viewed links\&quot;\n                        LinkFilter.UNVISITED -\u003e \&quot;No unviewed links\&quot;\n                        LinkFilter.ALL -\u003e \&quot;No links added yet\&quot;\n                        LinkFilter.CATEGORY -\u003e \&quot;No links in this category\&quot;\n                    }\n\n                    Text(\n                        text \u003d emptyStateText,\n                        modifier \u003d Modifier.fillMaxWidth(),\n                        textAlign \u003d TextAlign.Center,\n                        color \u003d MaterialTheme.colorScheme.onSurfaceVariant,\n                    )\n\n                    // Only show the full empty state UI for the ALL filter\n                    if (currentFilter \u003d\u003d LinkFilter.ALL) {\n                        Spacer(modifier \u003d Modifier.height(24.dp))\n                        Icon(\n                            modifier \u003d Modifier\n                                .size(200.dp)\n                                .padding(16.dp),\n                            imageVector \u003d Icons.Rounded.AddLink,\n                            contentDescription \u003d \&quot;No links\&quot;,\n                            tint \u003d MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha \u003d 0.5f),\n                        )\n                        Spacer(modifier \u003d Modifier.height(16.dp))\n                        Button(\n                            onClick \u003d openBottomSheet,\n                            colors \u003d ButtonDefaults.buttonColors(\n                                containerColor \u003d MaterialTheme.colorScheme.primary,\n                            ),\n                            modifier \u003d Modifier.padding(horizontal \u003d 16.dp),\n                        ) {\n                            Icon(\n                                imageVector \u003d Icons.Rounded.Add,\n                                contentDescription \u003d \&quot;Add Link\&quot;,\n                                tint \u003d MaterialTheme.colorScheme.onPrimary,\n                                modifier \u003d Modifier.size(20.dp),\n                            )\n                            Spacer(modifier \u003d Modifier.width(8.dp))\n                            Text(\n                                text \u003d \&quot;Add Link\&quot;,\n                                color \u003d MaterialTheme.colorScheme.onPrimary,\n                            )\n                        }\n                    }\n                }\n            }\n        } else {\n            items(\n                items \u003d links,\n                key \u003d { link -\u003e link.id },\n            ) { link -\u003e\n                AnimatedVisibility(\n                    visible \u003d !deletingLinkIds.contains(link.id),\n                    exit \u003d slideOutHorizontally(\n                        targetOffsetX \u003d { -it },\n                        animationSpec \u003d tween(300),\n                    ),\n                ) {\n                    LinkItem(link \u003d link, viewModel \u003d viewModel, onDelete \u003d onDelete)\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun LinkItem(link: Link, viewModel: MainViewModel, onDelete: (Link) -\u003e Unit) {\n    val context \u003d LocalContext.current\n\n    // State to track if the item is in edit mode\n    var isEditing by rememberSaveable { mutableStateOf(false) }\n    var editName by rememberSaveable { mutableStateOf(link.name ?: \&quot;\&quot;) }\n    var editUrl by rememberSaveable { mutableStateOf(link.uri.toString()) }\n\n    // Observe edit state\n    val editLinkUiState by viewModel.editLinkUiState.collectAsState()\n\n    // Effect to handle edit state changes\n    LaunchedEffect(editLinkUiState) {\n        when (editLinkUiState) {\n            is EditLinkUiState.Success -\u003e {\n                isEditing \u003d false\n                viewModel.resetEditState()\n            }\n\n            else -\u003e {\n                /* No action needed */\n            }\n        }\n    }\n\n    val dismissState \u003d rememberSwipeToDismissBoxState(\n        initialValue \u003d SwipeToDismissBoxValue.Settled,\n        positionalThreshold \u003d { distance -\u003e distance * 0.25f },\n    )\n\n    SwipeToDismissBox(\n        state \u003d dismissState,\n        enableDismissFromStartToEnd \u003d false,\n        enableDismissFromEndToStart \u003d true,\n        backgroundContent \u003d {\n            DismissBackground()\n        },\n        onDismiss \u003d {\n            when (it) {\n                SwipeToDismissBoxValue.EndToStart -\u003e onDelete(link)\n                else -\u003e {}\n            }\n        },\n    ) {\n        ElevatedCard(\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                .padding(horizontal \u003d 16.dp)\n                .clickable(enabled \u003d !isEditing) {\n                    // Mark the link as visited\n                    viewModel.markLinkAsVisited(link)\n                    // Open the link in browser\n                    val intent \u003d Intent(Intent.ACTION_VIEW, link.uri.toString().lowercase().toUri())\n                    context.startActivity(intent)\n                },\n            colors \u003d CardDefaults.cardColors(\n                containerColor \u003d MaterialTheme.colorScheme.surfaceContainerHigh,\n            ),\n        ) {\n            if (isEditing) {\n                // Edit mode UI\n                Column(\n                    modifier \u003d Modifier\n                        .fillMaxWidth()\n                        .padding(16.dp),\n                ) {\n                    // Error message\n                    var localErrorMessage by remember { mutableStateOf\u003cString?\u003e(null) }\n\n                    if (editLinkUiState is EditLinkUiState.Error) {\n                        Text(\n                            text \u003d (editLinkUiState as EditLinkUiState.Error).message,\n                            color \u003d MaterialTheme.colorScheme.error,\n                            modifier \u003d Modifier.padding(bottom \u003d 8.dp),\n                            fontSize \u003d 12.sp,\n                        )\n                    } else if (localErrorMessage !\u003d null) {\n                        Text(\n                            text \u003d localErrorMessage!!,\n                            color \u003d MaterialTheme.colorScheme.error,\n                            modifier \u003d Modifier.padding(bottom \u003d 8.dp),\n                            fontSize \u003d 12.sp,\n                        )\n                    }\n\n                    // Name field\n                    OutlinedTextField(\n                        value \u003d editName,\n                        onValueChange \u003d { editName \u003d it },\n                        label \u003d { Text(\&quot;Name\&quot;) },\n                        modifier \u003d Modifier.fillMaxWidth(),\n                        singleLine \u003d true,\n                        colors \u003d TextFieldDefaults.colors(),\n                        keyboardOptions \u003d\n                        KeyboardOptions(\n                            imeAction \u003d ImeAction.Done,\n                            capitalization \u003d KeyboardCapitalization.Sentences,\n                        ),\n                    )\n\n                    Spacer(modifier \u003d Modifier.height(8.dp))\n\n                    // URL field\n                    OutlinedTextField(\n                        value \u003d editUrl,\n                        onValueChange \u003d { editUrl \u003d it },\n                        label \u003d { Text(\&quot;URL\&quot;) },\n                        modifier \u003d Modifier.fillMaxWidth(),\n                        singleLine \u003d true,\n                        colors \u003d TextFieldDefaults.colors(),\n                    )\n\n                    Spacer(modifier \u003d Modifier.height(16.dp))\n\n                    // Categories field\n                    val categories \u003d remember(link.id) { mutableStateOf\u003cList\u003cCategory\u003e\u003e(emptyList()) }\n                    var showEditCategoryDialog by remember { mutableStateOf(false) }\n\n                    LaunchedEffect(link.categoryIds) {\n                        categories.value \u003d viewModel.getCategoriesForLink(link)\n                        // Initialize selected categories with the link\u0027s current categories\n                        viewModel.clearSelectedCategories()\n                        categories.value.forEach { category -\u003e\n                            viewModel.selectCategory(category)\n                        }\n                    }\n\n                    // Show category creation dialog\n                    CategoryDialog(\n                        viewModel \u003d viewModel,\n                        showDialog \u003d showEditCategoryDialog,\n                        onDismiss \u003d { showEditCategoryDialog \u003d false },\n                    )\n\n                    // Categories section\n                    Text(\n                        text \u003d \&quot;Categories\&quot;.uppercase(),\n                        style \u003d MaterialTheme.typography.labelMedium,\n                        modifier \u003d Modifier\n                            .fillMaxWidth()\n                            .padding(top \u003d 8.dp, bottom \u003d 4.dp),\n                    )\n\n                    // Show all categories as filter chips\n                    val allCategories by viewModel.allCategories.collectAsState()\n                    val selectedCategories by viewModel.selectedCategories.collectAsState()\n\n                    if (allCategories.isNotEmpty()) {\n                        LazyRow(\n                            modifier \u003d Modifier\n                                .fillMaxWidth()\n                                .padding(bottom \u003d 8.dp),\n                            horizontalArrangement \u003d Arrangement.spacedBy(8.dp),\n                        ) {\n                            items(allCategories) { category -\u003e\n                                val isSelected \u003d selectedCategories.contains(category)\n                                androidx.compose.material3.FilterChip(\n                                    selected \u003d isSelected,\n                                    leadingIcon \u003d if (isSelected) {\n                                        {\n                                            Icon(\n                                                imageVector \u003d Icons.Rounded.Done,\n                                                contentDescription \u003d \&quot;Done icon\&quot;,\n                                                modifier \u003d Modifier.size(FilterChipDefaults.IconSize),\n                                            )\n                                        }\n                                    } else {\n                                        null\n                                    },\n                                    onClick \u003d {\n                                        if (isSelected) {\n                                            viewModel.unselectCategory(category)\n                                        } else {\n                                            viewModel.selectCategory(category)\n                                        }\n                                    },\n                                    label \u003d { Text(category.name) },\n                                )\n                            }\n                        }\n                    }\n\n                    // Button to create a new category\n                    Button(\n                        onClick \u003d { showEditCategoryDialog \u003d true },\n                        modifier \u003d Modifier.fillMaxWidth(),\n                        colors \u003d ButtonDefaults.buttonColors(\n                            containerColor \u003d MaterialTheme.colorScheme.secondary,\n                        ),\n                    ) {\n                        Text(\&quot;Create New Category\&quot;)\n                    }\n\n                    Spacer(modifier \u003d Modifier.height(16.dp))\n\n                    // Action buttons\n                    Row(\n                        modifier \u003d Modifier.fillMaxWidth(),\n                        horizontalArrangement \u003d Arrangement.End,\n                    ) {\n                        TextButton(\n                            onClick \u003d {\n                                isEditing \u003d false\n                                editName \u003d link.name ?: \&quot;\&quot;\n                                editUrl \u003d link.uri.toString()\n                                viewModel.resetEditState()\n                            },\n                        ) {\n                            Text(\&quot;Cancel\&quot;)\n                        }\n\n                        Spacer(modifier \u003d Modifier.width(8.dp))\n\n                        Button(\n                            onClick \u003d {\n                                if (selectedCategories.isEmpty()) {\n                                    // Show error if no categories selected\n                                    localErrorMessage \u003d \&quot;Please select at least one category\&quot;\n                                } else {\n                                    localErrorMessage \u003d null\n                                    val categoryNames \u003d selectedCategories.map { it.name }\n                                    viewModel.editLink(link, editName, editUrl, categoryNames)\n                                }\n                            },\n                            enabled \u003d editLinkUiState !is EditLinkUiState.Loading,\n                        ) {\n                            if (editLinkUiState is EditLinkUiState.Loading) {\n                                CircularProgressIndicator(\n                                    modifier \u003d Modifier.size(24.dp),\n                                    color \u003d MaterialTheme.colorScheme.onPrimary,\n                                )\n                            } else {\n                                Text(\&quot;Save\&quot;)\n                            }\n                        }\n                    }\n                }\n            } else {\n                // View mode UI\n                Row(\n                    modifier \u003d Modifier\n                        .fillMaxWidth()\n                        .padding(16.dp),\n                    horizontalArrangement \u003d Arrangement.SpaceBetween,\n                    verticalAlignment \u003d Alignment.CenterVertically,\n                ) {\n                    Column(\n                        modifier \u003d Modifier\n                            .weight(1f)\n                            .padding(end \u003d 16.dp),\n                    ) {\n                        Text(\n                            text \u003d link.name ?: \&quot;Untitled\&quot;,\n                            fontSize \u003d 18.sp,\n                            fontWeight \u003d if (link.visited) FontWeight.Normal else FontWeight.Bold,\n                            color \u003d MaterialTheme.colorScheme.onSurface,\n                        )\n                        Spacer(modifier \u003d Modifier.height(4.dp))\n                        Text(\n                            text \u003d link.uri.toString(),\n                            fontSize \u003d 12.sp,\n                            color \u003d MaterialTheme.colorScheme.onSurfaceVariant,\n                            maxLines \u003d 1,\n                            overflow \u003d TextOverflow.Ellipsis,\n                        )\n                        Spacer(modifier \u003d Modifier.height(4.dp))\n                        Row(\n                            verticalAlignment \u003d Alignment.CenterVertically,\n                            horizontalArrangement \u003d Arrangement.spacedBy(4.dp),\n                        ) {\n                            // Display unviewed/viewed label\n                            Text(\n                                text \u003d if (link.visited) \&quot;Viewed\&quot; else \&quot;Unviewed\&quot;,\n                                fontSize \u003d 10.sp,\n                                color \u003d if (link.visited) {\n                                    MaterialTheme.colorScheme.primary\n                                } else {\n                                    MaterialTheme.colorScheme.tertiary\n                                },\n                                fontWeight \u003d FontWeight.Normal,\n                            )\n\n                            // Display categories if any\n                            if (link.categoryIds.isNotEmpty()) {\n                                val categories \u003d remember(link.categoryIds) {\n                                    mutableStateOf\u003cList\u003cCategory\u003e\u003e(emptyList())\n                                }\n\n                                // Load categories for this link\n                                LaunchedEffect(link.categoryIds) {\n                                    categories.value \u003d viewModel.getCategoriesForLink(link)\n                                }\n\n                                LazyRow(\n                                    horizontalArrangement \u003d Arrangement.spacedBy(4.dp),\n                                    modifier \u003d Modifier.padding(start \u003d 8.dp),\n                                ) {\n                                    items(categories.value) { category -\u003e\n                                        SuggestionChip(\n                                            modifier \u003d Modifier.height(24.dp),\n                                            colors \u003d SuggestionChipDefaults.suggestionChipColors(\n                                                containerColor \u003d MaterialTheme.colorScheme.secondaryContainer,\n                                                labelColor \u003d MaterialTheme.colorScheme.onSurface,\n                                            ),\n                                            border \u003d BorderStroke(\n                                                width \u003d 1.dp,\n                                                color \u003d Color.Transparent,\n                                            ),\n                                            onClick \u003d { },\n                                            label \u003d {\n                                                Text(\n                                                    text \u003d category.name,\n                                                    fontSize \u003d 10.sp,\n                                                )\n                                            },\n                                        )\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    Column(\n                        horizontalAlignment \u003d Alignment.End,\n                    ) {\n                        Row(\n                            horizontalArrangement \u003d Arrangement.spacedBy(8.dp),\n                            verticalAlignment \u003d Alignment.CenterVertically,\n                        ) {\n                            IconButton(\n                                onClick \u003d {\n                                    val sendIntent \u003d Intent().apply {\n                                        action \u003d Intent.ACTION_SEND\n                                        putExtra(Intent.EXTRA_TEXT, link.uri.toString())\n                                        type \u003d \&quot;text/plain\&quot;\n                                    }\n                                    context.startActivity(Intent.createChooser(sendIntent, null))\n                                },\n\n                                colors \u003d IconButtonDefaults.iconButtonColors(\n                                    contentColor \u003d MaterialTheme.colorScheme.onPrimary,\n                                    containerColor \u003d MaterialTheme.colorScheme.primary,\n                                ),\n\n                            ) {\n                                Icon(\n                                    imageVector \u003d Icons.Rounded.Share,\n                                    contentDescription \u003d \&quot;Share link\&quot;,\n                                    modifier \u003d Modifier\n                                        .size(24.dp),\n                                )\n                            }\n\n                            IconButton(\n                                onClick \u003d { isEditing \u003d true },\n                                colors \u003d IconButtonDefaults.iconButtonColors(\n                                    contentColor \u003d MaterialTheme.colorScheme.onPrimary,\n                                    containerColor \u003d MaterialTheme.colorScheme.primary,\n                                ),\n                            ) {\n                                Icon(\n                                    imageVector \u003d Icons.Rounded.EditNote,\n                                    contentDescription \u003d \&quot;Edit link\&quot;,\n                                    modifier \u003d Modifier\n                                        .size(24.dp),\n                                )\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun CategoryDialog(\n    viewModel: MainViewModel,\n    showDialog: Boolean,\n    onDismiss: () -\u003e Unit,\n) {\n    val categoryUiState by viewModel.categoryUiState.collectAsState()\n    var categoryName by rememberSaveable { mutableStateOf(\&quot;\&quot;) }\n    var errorMessage by remember { mutableStateOf\u003cString?\u003e(null) }\n\n    LaunchedEffect(categoryUiState) {\n        when (categoryUiState) {\n            is CategoryUiState.Error -\u003e {\n                errorMessage \u003d (categoryUiState as CategoryUiState.Error).message\n            }\n\n            is CategoryUiState.Success -\u003e {\n                errorMessage \u003d null\n                categoryName \u003d \&quot;\&quot;\n                onDismiss()\n                viewModel.resetCategoryState()\n            }\n\n            else -\u003e {\n                errorMessage \u003d null\n            }\n        }\n    }\n\n    if (showDialog) {\n        androidx.compose.material3.AlertDialog(\n            onDismissRequest \u003d {\n                onDismiss()\n                viewModel.resetCategoryState()\n            },\n            title \u003d { Text(\&quot;Create Category\&quot;) },\n            text \u003d {\n                Column {\n                    if (errorMessage !\u003d null) {\n                        Text(\n                            text \u003d errorMessage!!,\n                            color \u003d MaterialTheme.colorScheme.error,\n                            modifier \u003d Modifier.padding(bottom \u003d 8.dp),\n                        )\n                    }\n\n                    OutlinedTextField(\n                        value \u003d categoryName,\n                        onValueChange \u003d { categoryName \u003d it },\n                        label \u003d { Text(\&quot;Category Name\&quot;) },\n                        singleLine \u003d true,\n                        modifier \u003d Modifier.fillMaxWidth(),\n                        isError \u003d errorMessage !\u003d null,\n                        keyboardOptions \u003d KeyboardOptions(\n                            imeAction \u003d ImeAction.Done,\n                            capitalization \u003d KeyboardCapitalization.Sentences,\n                        ),\n                        keyboardActions \u003d KeyboardActions(\n                            onDone \u003d {\n                                viewModel.addCategory(categoryName)\n                            },\n                        ),\n                    )\n                }\n            },\n            confirmButton \u003d {\n                Button(\n                    onClick \u003d {\n                        viewModel.addCategory(categoryName)\n                    },\n                    enabled \u003d categoryUiState !is CategoryUiState.Loading,\n                ) {\n                    if (categoryUiState is CategoryUiState.Loading) {\n                        CircularProgressIndicator(\n                            modifier \u003d Modifier.size(24.dp),\n                            color \u003d MaterialTheme.colorScheme.onPrimary,\n                        )\n                    } else {\n                        Text(\&quot;Create\&quot;)\n                    }\n                }\n            },\n            dismissButton \u003d {\n                TextButton(\n                    onClick \u003d {\n                        onDismiss()\n                        viewModel.resetCategoryState()\n                    },\n                ) {\n                    Text(\&quot;Cancel\&quot;)\n                }\n            },\n        )\n    }\n}\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun ModalBottomSheetAddUrl(\n    viewModel: MainViewModel \u003d hiltViewModel(),\n    openBottomSheet: Boolean \u003d false,\n    onOpenBottomSheetChange: (Boolean) -\u003e Unit \u003d {},\n) {\n    var url by rememberSaveable { mutableStateOf(\&quot;\&quot;) }\n    var name by rememberSaveable { mutableStateOf(\&quot;\&quot;) }\n    var showCategoryDialog by remember { mutableStateOf(false) }\n    var errorMessage by remember { mutableStateOf\u003cString?\u003e(null) }\n\n    val scope \u003d rememberCoroutineScope()\n    val bottomSheetState \u003d rememberModalBottomSheetState(skipPartiallyExpanded \u003d true)\n    val nameFocusRequester \u003d remember { FocusRequester() }\n\n    val uiState by viewModel.uiState.collectAsState()\n    val allCategories by viewModel.allCategories.collectAsState()\n    val selectedCategories by viewModel.selectedCategories.collectAsState()\n    val sharedUrl by viewModel.sharedUrl.collectAsState()\n\n    // Show category creation dialog\n    CategoryDialog(\n        viewModel \u003d viewModel,\n        showDialog \u003d showCategoryDialog,\n        onDismiss \u003d { showCategoryDialog \u003d false },\n    )\n\n    LaunchedEffect(uiState) {\n        when (uiState) {\n            is AddLinkUiState.Error -\u003e {\n                errorMessage \u003d (uiState as AddLinkUiState.Error).message\n            }\n\n            is AddLinkUiState.Success -\u003e {\n                errorMessage \u003d null\n                url \u003d \&quot;\&quot;\n                name \u003d \&quot;\&quot;\n                viewModel.clearSelectedCategories()\n                viewModel.clearSharedUrl()\n                scope.launch {\n                    bottomSheetState.hide()\n                    onOpenBottomSheetChange(false)\n                }\n                viewModel.resetState()\n            }\n\n            else -\u003e {\n                errorMessage \u003d null\n            }\n        }\n    }\n\n    // Handle shared URL pre-filling\n    LaunchedEffect(sharedUrl) {\n        sharedUrl?.let { sharedUrlValue -\u003e\n            url \u003d sharedUrlValue\n        }\n    }\n\n    // Sheet content\n    if (openBottomSheet) {\n        ModalBottomSheet(\n            onDismissRequest \u003d {\n                onOpenBottomSheetChange(false)\n                errorMessage \u003d null\n                viewModel.resetState()\n                viewModel.clearSelectedCategories()\n                viewModel.clearSharedUrl()\n            },\n            sheetState \u003d bottomSheetState,\n        ) {\n            Column(\n                modifier \u003d Modifier\n                    .fillMaxWidth()\n                    .padding(16.dp),\n                horizontalAlignment \u003d Alignment.CenterHorizontally,\n            ) {\n                // Cancel button\n                Row(\n                    Modifier.fillMaxWidth(),\n                    horizontalArrangement \u003d Arrangement.Center,\n                ) {\n                    TextButton(\n                        onClick \u003d {\n                            scope.launch {\n                                bottomSheetState.hide()\n                                onOpenBottomSheetChange(false)\n                                errorMessage \u003d null\n                                viewModel.resetState()\n                                viewModel.clearSelectedCategories()\n                                viewModel.clearSharedUrl()\n                            }\n                        },\n                    ) {\n                        Text(\n                            fontSize \u003d 22.sp,\n                            fontWeight \u003d FontWeight.Bold,\n                            color \u003d MaterialTheme.colorScheme.primary,\n                            text \u003d \&quot;Cancel\&quot;,\n                        )\n                    }\n                }\n\n                // Error message\n                if (errorMessage !\u003d null) {\n                    Text(\n                        text \u003d errorMessage!!,\n                        color \u003d MaterialTheme.colorScheme.error,\n                        modifier \u003d Modifier.padding(vertical \u003d 8.dp),\n                    )\n                }\n\n                // URL Input Field\n                OutlinedTextField(\n                    value \u003d url,\n                    onValueChange \u003d { url \u003d it },\n                    label \u003d { Text(\&quot;URL\&quot;) },\n                    modifier \u003d Modifier.fillMaxWidth(),\n                    singleLine \u003d true,\n                    colors \u003d TextFieldDefaults.colors(),\n                    keyboardOptions \u003d KeyboardOptions(imeAction \u003d ImeAction.Next),\n                    keyboardActions \u003d KeyboardActions(\n                        onNext \u003d {\n                            nameFocusRequester.requestFocus()\n                        },\n                    ),\n                )\n\n                Spacer(modifier \u003d Modifier.height(16.dp))\n\n                // Name Input Field\n                OutlinedTextField(\n                    value \u003d name,\n                    onValueChange \u003d { name \u003d it },\n                    label \u003d { Text(\&quot;Name\&quot;) },\n                    modifier \u003d Modifier\n                        .fillMaxWidth()\n                        .focusRequester(nameFocusRequester),\n                    singleLine \u003d true,\n                    colors \u003d TextFieldDefaults.colors(),\n                    keyboardOptions \u003d KeyboardOptions(imeAction \u003d ImeAction.Done),\n                    keyboardActions \u003d KeyboardActions(\n                        onDone \u003d {\n                            // No action needed here\n                        },\n                    ),\n                )\n\n                Spacer(modifier \u003d Modifier.height(16.dp))\n\n                // Categories Section\n\n                Spacer(modifier \u003d Modifier.height(8.dp))\n\n                // Category Chip Group\n                if (allCategories.isNotEmpty()) {\n                    Text(\n                        text \u003d \&quot;Categories\&quot;.uppercase(),\n                        style \u003d MaterialTheme.typography.labelMedium,\n                        modifier \u003d Modifier\n                            .fillMaxWidth()\n                            .padding(top \u003d 8.dp, bottom \u003d 4.dp),\n                    )\n\n                    LazyRow(\n                        modifier \u003d Modifier\n                            .fillMaxWidth()\n                            .padding(bottom \u003d 8.dp),\n                        horizontalArrangement \u003d Arrangement.spacedBy(8.dp),\n                    ) {\n                        items(allCategories) { category -\u003e\n                            val isSelected \u003d selectedCategories.contains(category)\n                            androidx.compose.material3.FilterChip(\n                                selected \u003d isSelected,\n                                leadingIcon \u003d if (isSelected) {\n                                    {\n                                        Icon(\n                                            imageVector \u003d Icons.Rounded.Done,\n                                            contentDescription \u003d \&quot;Done icon\&quot;,\n                                            modifier \u003d Modifier.size(FilterChipDefaults.IconSize),\n                                        )\n                                    }\n                                } else {\n                                    null\n                                },\n                                onClick \u003d {\n                                    if (isSelected) {\n                                        viewModel.unselectCategory(category)\n                                    } else {\n                                        viewModel.selectCategory(category)\n                                    }\n                                },\n                                label \u003d { Text(category.name) },\n                            )\n                        }\n                    }\n                }\n\n                // Button to create a new category\n                Button(\n                    onClick \u003d { showCategoryDialog \u003d true },\n                    modifier \u003d Modifier.fillMaxWidth(),\n                    colors \u003d ButtonDefaults.buttonColors(\n                        containerColor \u003d MaterialTheme.colorScheme.secondary,\n                    ),\n                ) {\n                    Text(\&quot;Create New Category\&quot;)\n                }\n\n                Spacer(modifier \u003d Modifier.height(16.dp))\n\n                // Submit button\n                Button(\n                    onClick \u003d {\n                        if (selectedCategories.isEmpty()) {\n                            errorMessage \u003d \&quot;Please select at least one category\&quot;\n                        } else {\n                            val categoryNames \u003d selectedCategories.map { it.name }\n                            viewModel.addLink(name, url, categoryNames)\n                        }\n                    },\n                    modifier \u003d Modifier.fillMaxWidth(),\n                    enabled \u003d uiState !is AddLinkUiState.Loading,\n                ) {\n                    if (uiState is AddLinkUiState.Loading) {\n                        CircularProgressIndicator(\n                            modifier \u003d Modifier.size(24.dp),\n                            color \u003d MaterialTheme.colorScheme.onPrimary,\n                        )\n                    } else {\n                        Text(stringResource(R.string.submit))\n                    }\n                }\n            }\n        }\n    }\n}\n\nfun shareApp() {\n   \n}\n\n```\n\u003c/current_file\u003e\n\u003c/additional_data\u003e\n\u003cuser_query\u003e\nfor the shareApp method, add the intent and functionality to share this application with a friend.\n\u003c/user_query\u003e&quot;}]},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;thinking&quot;,&quot;thinking&quot;:&quot;\u003d\u003d&quot;,&quot;signature&quot;:&quot;rs_689b749893708191b24013b8b7d3d71100d6a2dc0132e5e4&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Implementing the share functionality by updating `EnterAlwaysTopAppBar` to use `LocalContext` and wiring a new `shareApp(context: Context)` that shares the Play Store link for this app. Proceeding to make the edits.&quot;}],&quot;tool_calls&quot;:[{&quot;id&quot;:&quot;call_AKtjuDbt79E3IurbUlKiDTEU&quot;,&quot;type&quot;:&quot;function&quot;,&quot;function&quot;:{&quot;name&quot;:&quot;edit_file&quot;,&quot;arguments&quot;:&quot;{\&quot;target_file\&quot;:\&quot;app/src/main/java/com/softklass/linkbarn/ui/main/MainScreen.kt\&quot;,\&quot;instructions\&quot;:\&quot;I will update the shareApp usage to pass a Context, add a Context import, and implement shareApp to share the app link via an ACTION_SEND intent.\&quot;,\&quot;code_edit\&quot;:\&quot;package com.softklass.linkbarn.ui.main\\n\\nimport android.content.Intent\\nimport android.util.Log\\nimport androidx.compose.animation.AnimatedVisibility\\nimport androidx.compose.animation.animateContentSize\\nimport androidx.compose.animation.core.tween\\nimport androidx.compose.animation.expandVertically\\nimport androidx.compose.animation.fadeIn\\nimport androidx.compose.animation.fadeOut\\nimport androidx.compose.animation.shrinkVertically\\nimport androidx.compose.animation.slideOutHorizontally\\nimport androidx.compose.foundation.BorderStroke\\nimport androidx.compose.foundation.clickable\\nimport androidx.compose.foundation.layout.Arrangement\\nimport androidx.compose.foundation.layout.Box\\nimport androidx.compose.foundation.layout.Column\\nimport androidx.compose.foundation.layout.Row\\nimport androidx.compose.foundation.layout.Spacer\\nimport androidx.compose.foundation.layout.fillMaxSize\\nimport androidx.compose.foundation.layout.fillMaxWidth\\nimport androidx.compose.foundation.layout.height\\nimport androidx.compose.foundation.layout.padding\\nimport androidx.compose.foundation.layout.size\\nimport androidx.compose.foundation.layout.width\\nimport androidx.compose.foundation.lazy.LazyColumn\\nimport androidx.compose.foundation.lazy.LazyListState\\nimport androidx.compose.foundation.lazy.LazyRow\\nimport androidx.compose.foundation.lazy.items\\nimport androidx.compose.foundation.lazy.rememberLazyListState\\nimport androidx.compose.foundation.shape.RoundedCornerShape\\nimport androidx.compose.foundation.text.KeyboardActions\\nimport androidx.compose.foundation.text.KeyboardOptions\\nimport androidx.compose.material.icons.Icons\\nimport androidx.compose.material.icons.filled.ArrowUpward\\nimport androidx.compose.material.icons.rounded.Add\\nimport androidx.compose.material.icons.rounded.AddLink\\nimport androidx.compose.material.icons.rounded.Category\\nimport androidx.compose.material.icons.rounded.Check\\nimport androidx.compose.material.icons.rounded.Dashboard\\nimport androidx.compose.material.icons.rounded.Done\\nimport androidx.compose.material.icons.rounded.EditNote\\nimport androidx.compose.material.icons.rounded.Settings\\nimport androidx.compose.material.icons.rounded.Share\\nimport androidx.compose.material3.BottomAppBar\\nimport androidx.compose.material3.Button\\nimport androidx.compose.material3.ButtonDefaults\\nimport androidx.compose.material3.ButtonGroupDefaults\\nimport androidx.compose.material3.CardDefaults\\nimport androidx.compose.material3.CircularProgressIndicator\\nimport androidx.compose.material3.ElevatedCard\\nimport androidx.compose.material3.ExperimentalMaterial3Api\\nimport androidx.compose.material3.ExperimentalMaterial3ExpressiveApi\\nimport androidx.compose.material3.ExtendedFloatingActionButton\\nimport androidx.compose.material3.FilterChipDefaults\\nimport androidx.compose.material3.FloatingActionButton\\nimport androidx.compose.material3.Icon\\nimport androidx.compose.material3.IconButton\\nimport androidx.compose.material3.IconButtonDefaults\\nimport androidx.compose.material3.MaterialTheme\\nimport androidx.compose.material3.ModalBottomSheet\\nimport androidx.compose.material3.OutlinedTextField\\nimport androidx.compose.material3.Scaffold\\nimport androidx.compose.material3.SnackbarDuration\\nimport androidx.compose.material3.SnackbarHost\\nimport androidx.compose.material3.SnackbarHostState\\nimport androidx.compose.material3.SnackbarResult\\nimport androidx.compose.material3.SuggestionChip\\nimport androidx.compose.material3.SuggestionChipDefaults\\nimport androidx.compose.material3.SwipeToDismissBox\\nimport androidx.compose.material3.SwipeToDismissBoxValue\\nimport androidx.compose.material3.Text\\nimport androidx.compose.material3.TextButton\\nimport androidx.compose.material3.TextFieldDefaults\\nimport androidx.compose.material3.ToggleButton\\nimport androidx.compose.material3.ToggleButtonDefaults\\nimport androidx.compose.material3.TopAppBar\\nimport androidx.compose.material3.TopAppBarDefaults\\nimport androidx.compose.material3.rememberModalBottomSheetState\\nimport androidx.compose.material3.rememberSwipeToDismissBoxState\\nimport androidx.compose.runtime.Composable\\nimport androidx.compose.runtime.LaunchedEffect\\nimport androidx.compose.runtime.collectAsState\\nimport androidx.compose.runtime.derivedStateOf\\nimport androidx.compose.runtime.getValue\\nimport androidx.compose.runtime.mutableStateOf\\nimport androidx.compose.runtime.remember\\nimport androidx.compose.runtime.rememberCoroutineScope\\nimport androidx.compose.runtime.saveable.rememberSaveable\\nimport androidx.compose.runtime.setValue\\nimport androidx.compose.ui.Alignment\\nimport androidx.compose.ui.Modifier\\nimport androidx.compose.ui.focus.FocusRequester\\nimport androidx.compose.ui.focus.focusRequester\\nimport androidx.compose.ui.graphics.Color\\nimport androidx.compose.ui.input.nestedscroll.nestedScroll\\nimport androidx.compose.ui.platform.LocalContext\\nimport androidx.compose.ui.res.stringResource\\nimport androidx.compose.ui.text.font.FontWeight\\nimport androidx.compose.ui.text.input.ImeAction\\nimport androidx.compose.ui.text.input.KeyboardCapitalization\\nimport androidx.compose.ui.text.style.TextAlign\\nimport androidx.compose.ui.text.style.TextOverflow\\nimport androidx.compose.ui.unit.dp\\nimport androidx.compose.ui.unit.sp\\nimport androidx.core.content.ContextCompat\\nimport androidx.core.content.ContextCompat.startActivity\\nimport androidx.core.net.toUri\\nimport androidx.hilt.navigation.compose.hiltViewModel\\nimport com.softklass.linkbarn.MainActivity\\nimport com.softklass.linkbarn.R\\nimport com.softklass.linkbarn.data.model.Category\\nimport com.softklass.linkbarn.data.model.Link\\nimport com.softklass.linkbarn.ui.partials.DismissBackground\\nimport com.softklass.linkbarn.ui.partials.TopAppBarIcon\\nimport kotlinx.coroutines.launch\\nimport android.content.Context\\n\\n@OptIn(ExperimentalMaterial3Api::class, ExperimentalMaterial3ExpressiveApi::class)\\n@Composable\\nfun EnterAlwaysTopAppBar(\\n    viewModel: MainViewModel,\\n    onNavigateToSettings: () -\u003e Unit \u003d {},\\n    onNavigateToCategories: () -\u003e Unit \u003d {},\\n    onNavigateToDashboard: () -\u003e Unit \u003d {},\\n    openBottomSheet: () -\u003e Unit,\\n) {\\n    val scrollBehavior \u003d TopAppBarDefaults.enterAlwaysScrollBehavior()\\n    val coroutineScope \u003d rememberCoroutineScope()\\n    val listState \u003d rememberLazyListState()\\n    val links by viewModel.links.collectAsState()\\n    val context \u003d LocalContext.current\\n\\n    val isTopAppBarOffScreen by remember {\\n        derivedStateOf {\\n            scrollBehavior.state.heightOffset \u003c -5\\n        }\\n    }\\n    val snackbarHostState \u003d remember { SnackbarHostState() }\\n\\n    Scaffold(\\n        snackbarHost \u003d { SnackbarHost(snackbarHostState) },\\n        modifier \u003d Modifier.nestedScroll(scrollBehavior.nestedScrollConnection),\\n        topBar \u003d {\\n            TopAppBar(\\n                title \u003d {\\n                    Text(\\n                        text \u003d stringResource(id \u003d R.string.main_screen_title),\\n                        color \u003d MaterialTheme.colorScheme.primary,\\n                        maxLines \u003d 1,\\n                        overflow \u003d TextOverflow.Ellipsis,\\n                    )\\n                },\\n                subtitle \u003d { Text(\\\&quot;Your saved links.\\\&quot;, maxLines \u003d 1, overflow \u003d TextOverflow.Ellipsis) },\\n                scrollBehavior \u003d scrollBehavior,\\n                actions \u003d {\\n                    TopAppBarIcon { shareApp(context) }\\n\\n                },\\n            )\\n        },\\n        bottomBar \u003d {\\n            BottomAppBar(\\n                containerColor \u003d MaterialTheme.colorScheme.surface,\\n                actions \u003d {\\n                    IconButton(onClick \u003d { onNavigateToCategories() }) {\\n                        Icon(\\n                            imageVector \u003d Icons.Rounded.Category,\\n                            contentDescription \u003d \\\&quot;Categories\\\&quot;,\\n                            tint \u003d MaterialTheme.colorScheme.onSurface,\\n                        )\\n                    }\\n\\n                    IconButton(onClick \u003d { onNavigateToDashboard() }) {\\n                        Icon(\\n                            imageVector \u003d Icons.Rounded.Dashboard,\\n                            contentDescription \u003d \\\&quot;Dashboard\\\&quot;,\\n                            tint \u003d MaterialTheme.colorScheme.onSurface,\\n                        )\\n                    }\\n\\n                    IconButton(onClick \u003d { onNavigateToSettings() }) {\\n                        Icon(\\n                            imageVector \u003d Icons.Rounded.Settings,\\n                            contentDescription \u003d \\\&quot;Settings\\\&quot;,\\n                            tint \u003d MaterialTheme.colorScheme.onSurface,\\n                        )\\n                    }\\n                },\\n                floatingActionButton \u003d {\\n                    ExtendedFloatingActionButton(\\n                        onClick \u003d openBottomSheet,\\n                        icon \u003d { Icon(Icons.Rounded.Add, \\\&quot;Add a Link\\\&quot;, tint \u003d MaterialTheme.colorScheme.onPrimary) },\\n                        text \u003d { Text(text \u003d \\\&quot;Add a Link\\\&quot;) },\\n                        containerColor \u003d MaterialTheme.colorScheme.primary,\\n                        shape \u003d RoundedCornerShape(16.dp),\\n                    )\\n                },\\n            )\\n        },\\n        content \u003d { innerPadding -\u003e\\n            Box(modifier \u003d Modifier.fillMaxSize()) {\\n                Column(\\n                    modifier \u003d Modifier\\n                        .padding(innerPadding)\\n                        .fillMaxSize(),\\n                ) {\\n                    CollapsingHeader(viewModel \u003d viewModel, isTopAppBarOffScreen \u003d isTopAppBarOffScreen)\\n                    LinksContent(\\n                        viewModel \u003d viewModel,\\n                        listState \u003d listState,\\n                        openBottomSheet \u003d openBottomSheet,\\n                        onDelete \u003d { link -\u003e\\n                            viewModel.deleteLink(link)\\n\\n                            coroutineScope.launch {\\n                                val result \u003d snackbarHostState\\n                                    .showSnackbar(\\n                                        message \u003d \\\&quot;Category ${link.name} deleted\\\&quot;,\\n                                        actionLabel \u003d \\\&quot;Undo\\\&quot;,\\n                                        duration \u003d SnackbarDuration.Short,\\n                                        withDismissAction \u003d true,\\n                                    )\\n                                when (result) {\\n                                    SnackbarResult.ActionPerformed -\u003e {\\n                                        Log.d(\\\&quot;MainScreen\\\&quot;, \\\&quot;Undo delete tapped ${link.name}\\\&quot;)\\n                                        viewModel.undoDelete()\\n                                    }\\n\\n                                    SnackbarResult.Dismissed -\u003e {\\n                                        Log.d(\\\&quot;MainScreen\\\&quot;, \\\&quot;Snackbar dismissed\\\&quot;)\\n                                    }\\n                                }\\n                            }\\n                        },\\n                        links \u003d links,\\n                    )\\n                }\\n\\n                AnimatedVisibility(\\n                    visible \u003d isTopAppBarOffScreen,\\n                    enter \u003d fadeIn(),\\n                    exit \u003d fadeOut(),\\n                    modifier \u003d Modifier\\n                        .align(Alignment.BottomEnd) // Position at bottom-right\\n                        .padding(innerPadding) // Respect Scaffold padding\\n                        .padding(16.dp), // Additional padding for the FAB\\n                ) {\\n                    FloatingActionButton(\\n                        onClick \u003d {\\n                            coroutineScope.launch {\\n                                listState.animateScrollToItem(0) // Scroll LazyColumn to top\\n                                // Optionally, also expand the TopAppBar fully\\n                                scrollBehavior.state.heightOffset \u003d 0f\\n                            }\\n                        },\\n                        containerColor \u003d MaterialTheme.colorScheme.secondary,\\n                        contentColor \u003d MaterialTheme.colorScheme.onSecondary,\\n                    ) {\\n                        Icon(Icons.Filled.ArrowUpward, \\\&quot;Scroll to top\\\&quot;)\\n                    }\\n                }\\n            }\\n        },\\n    )\\n}\\n\\n// ... existing code ...\\n\\nfun shareApp(context: Context) {\\n    val packageName \u003d context.packageName\\n    val shareText \u003d \\\&quot;Check out LinkBarn: https://play.google.com/store/apps/details?id\u003d$packageName\\\&quot;\\n    val sendIntent \u003d Intent(Intent.ACTION_SEND).apply {\\n        type \u003d \\\&quot;text/plain\\\&quot;\\n        putExtra(Intent.EXTRA_SUBJECT, \\\&quot;LinkBarn\\\&quot;)\\n        putExtra(Intent.EXTRA_TEXT, shareText)\\n    }\\n    val chooser \u003d Intent.createChooser(sendIntent, \\\&quot;Share LinkBarn\\\&quot;)\\n    startActivity(context, chooser, null)\\n}\\n\&quot;}&quot;}}]},{&quot;role&quot;:&quot;tool&quot;,&quot;name&quot;:&quot;edit_file&quot;,&quot;tool_call_id&quot;:&quot;call_AKtjuDbt79E3IurbUlKiDTEU&quot;,&quot;content&quot;:&quot;The apply model made the following changes to the file:\n\n```\n@@ -3,4 +3,5 @@\n import android.content.Intent\n import android.util.Log\n+import android.content.Context\n import androidx.compose.animation.AnimatedVisibility\n import androidx.compose.animation.animateContentSize\n@@ -163,4 +164,5 @@\n     val listState \u003d rememberLazyListState()\n     val links by viewModel.links.collectAsState()\n+    val context \u003d LocalContext.current\n \n     val isTopAppBarOffScreen by remember {\n@@ -187,5 +189,5 @@\n                 scrollBehavior \u003d scrollBehavior,\n                 actions \u003d {\n-                    TopAppBarIcon { shareApp() }\n+                    TopAppBarIcon { shareApp(context) }\n \n                 },\n@@ -1226,6 +1228,14 @@\n }\n \n-fun shareApp() {\n-   \n+fun shareApp(context: Context) {\n+    val packageName \u003d context.packageName\n+    val shareText \u003d \&quot;Check out LinkBarn: https://play.google.com/store/apps/details?id\u003d$packageName\&quot;\n+    val sendIntent \u003d Intent(Intent.ACTION_SEND).apply {\n+        type \u003d \&quot;text/plain\&quot;\n+        putExtra(Intent.EXTRA_SUBJECT, \&quot;LinkBarn\&quot;)\n+        putExtra(Intent.EXTRA_TEXT, shareText)\n+    }\n+    val chooser \u003d Intent.createChooser(sendIntent, \&quot;Share LinkBarn\&quot;)\n+    startActivity(context, chooser, null)\n }\n \n```\n\nThe edit was successful with no linter errors.&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Sharing is now wired up. I added `LocalContext` usage in `EnterAlwaysTopAppBar` and implemented `shareApp(context: Context)` to send a Play Store link for this app via an ACTION_SEND intent.\n\n- Changes:\n  - Added `val context \u003d LocalContext.current` in `EnterAlwaysTopAppBar` and call `TopAppBarIcon { shareApp(context) }`.\n  - Implemented `fun shareApp(context: Context)` to share `https://play.google.com/store/apps/details?id\u003d\u003cpackageName\u003e` using a chooser.\n\n- Impacted file:\n  - `app/src/main/java/com/softklass/linkbarn/ui/main/MainScreen.kt`\n\n- Core edit:\n  ```kotlin\n  val context \u003d LocalContext.current\n  // ...\n  TopAppBarIcon { shareApp(context) }\n  // ...\n  fun shareApp(context: Context) {\n      val packageName \u003d context.packageName\n      val shareText \u003d \&quot;Check out LinkBarn: https://play.google.com/store/apps/details?id\u003d$packageName\&quot;\n      val sendIntent \u003d Intent(Intent.ACTION_SEND).apply {\n          type \u003d \&quot;text/plain\&quot;\n          putExtra(Intent.EXTRA_SUBJECT, \&quot;LinkBarn\&quot;)\n          putExtra(Intent.EXTRA_TEXT, shareText)\n      }\n      val chooser \u003d Intent.createChooser(sendIntent, \&quot;Share LinkBarn\&quot;)\n      startActivity(context, chooser, null)\n  }\n  ```&quot;}]}]}" />
      </map>
    </option>
  </component>
</project>